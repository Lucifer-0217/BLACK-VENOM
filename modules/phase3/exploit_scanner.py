# black-venom/modules/phase3/exploit_scanner.py

import socket
import json
import re
import requests
from colorama import Fore, Style

# Sample offline CVE banner DB (can expand later)
cve_db = {
    "Apache/2.2.8": "CVE-2009-1195",
    "nginx/1.4.0": "CVE-2013-2028",
    "PHP/5.3.3": "CVE-2015-4600",
    "OpenSSH_5.3": "CVE-2016-0777"
}

common_ports = [21, 22, 23, 25, 53, 80, 110, 139, 143, 443, 445, 3306, 8080]

def banner_scan(ip, port):
    try:
        s = socket.socket()
        s.settimeout(1)
        s.connect((ip, port))
        banner = s.recv(1024).decode().strip()
        s.close()
        return banner
    except:
        return None

def http_banner(url):
    try:
        r = requests.get(url, timeout=3)
        return r.headers.get("Server", "")
    except:
        return ""

def check_vulnerabilities(banner):
    for key in cve_db:
        if key in banner:
            return cve_db[key]
    return None

def run(target):
    print(Fore.CYAN + f"\n[üîç] Scanning {target} for open ports and services..." + Style.RESET_ALL)
    ip = socket.gethostbyname(target.replace("http://", "").replace("https://", "").split("/")[0])
    results = []

    for port in common_ports:
        try:
            s = socket.socket()
            s.settimeout(1)
            s.connect((ip, port))
            s.close()
            print(Fore.GREEN + f"[+] Port {port} is open" + Style.RESET_ALL)

            # Get banner
            banner = banner_scan(ip, port)
            if not banner and port in [80, 443, 8080]:
                url = f"http://{target}" if not target.startswith("http") else target
                banner = http_banner(url)

            if banner:
                print(f"    ‚îî‚îÄ Banner: {banner}")
                cve = check_vulnerabilities(banner)
                if cve:
                    print(Fore.RED + f"    ‚îî‚îÄ ‚ö†Ô∏è Vulnerable: {cve}" + Style.RESET_ALL)
                    results.append({"port": port, "banner": banner, "cve": cve})
                else:
                    results.append({"port": port, "banner": banner, "cve": None})
            else:
                results.append({"port": port, "banner": None, "cve": None})

        except:
            continue

    # Save log
    with open("logs/phase3/exploit_scan.json", "w") as f:
        json.dump(results, f, indent=2)

    print(Fore.MAGENTA + "\n[‚úì] Exploit scan complete. Results saved to logs/phase3/exploit_scan.json\n" + Style.RESET_ALL)
