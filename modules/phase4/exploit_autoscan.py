import subprocess
import os
import shutil
import glob
from datetime import datetime

# üß† Phase 4 Post-Analysis Modules
from modules.phase4.vuln_parser import parse_vulns
from modules.phase4.aira_suggest import aira_suggest
from modules.phase4.cve_finder import find_exploits

def nuclei_scan(target):
    nuclei_path = shutil.which("nuclei") or os.path.join(os.getcwd(), "nuclei.exe")

    if not os.path.exists(nuclei_path):
        print("[‚ùå] Nuclei not found. Place nuclei.exe in project folder or add to PATH.")
        print("[üí°] Download it from: https://github.com/projectdiscovery/nuclei/releases")
        return

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    out_file = f"logs/phase4/nuclei_scan_{target.replace('.', '_')}_{timestamp}.txt"

    print(f"[‚ö°] Starting Nuclei scan on: {target}")
    try:
        cmd = [
            nuclei_path,
            "-u", target,
            "-severity", "low,medium,high,critical",
            "-o", out_file,
            #"-ni"  # <-- Disable Interactsh to prevent freeze
        ]
        subprocess.run(cmd, check=True)
        print(f"[‚úî] Scan completed. Results saved to {out_file}")
    except Exception as e:
        print(f"[!] Nuclei scan failed: {e}")
        return

    # üîç Auto-pick latest log file
    log_file = get_latest_log_file()
    if not log_file:
        print("[‚ùå] No scan log found to analyze.")
        return

    print(f"[üìÅ] Auto-picked log file: {log_file}")

    # üß† Phase 4 Post-Scan Chain
    cve_list = parse_vulns(log_file)
    if not cve_list:
        print("[üò¥] No CVEs found in the scan.")
        return

    aira_suggest(cve_list)
    find_exploits(cve_list)

def get_latest_log_file():
    log_dir = "logs/phase4"
    pattern = os.path.join(log_dir, "nuclei_scan_*.txt")
    files = glob.glob(pattern)
    if not files:
        return None
    latest_file = max(files, key=os.path.getmtime)
    return latest_file
